<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx.xsd
">
    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver.class.name}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="breakAfterAcquireFailure" value="false" />
    </bean>

    <!-- 配置映射 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:config/mapper/*.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="plugins">
            <bean id="miemiedev" class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor">
                <property name="dialectClass" value="com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect"/>
            </bean>
        </property>
    </bean>
    <!-- 模板注入 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- dao接口关联 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
        <property name="basePackage" value="top.buukle.daoEntity.mc.dao"/>
    </bean>

    <!-- 打开事务 -->
    <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 定义事务传播属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 如果系统抛出异常，事务回滚。 -->
            <tx:method name="save*" read-only="false" rollback-for="Exception" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="update*" read-only="false" rollback-for="Exception" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="add*" read-only="false" rollback-for="Exception" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="modify*" read-only="false" rollback-for="Exception" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="delete*" read-only="false" rollback-for="Exception" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="do*" read-only="false" rollback-for="Exception" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="get*" read-only="false" rollback-for="Exception" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="find*" read-only="false" rollback-for="Exception" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="*" read-only="false" rollback-for="Exception" propagation="SUPPORTS" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务配置,切换数据源要比持久层代码更先执行,事务属于持久层 -->
    <aop:config>
        <aop:pointcut id="dataSourcePointCut" expression="(
        execution(* *..*consumer.cms.service..*(..)))
        or execution(* *..*consumer.cms.business..*(..)))
        )"/>
        <aop:advisor pointcut-ref="dataSourcePointCut" advice-ref="txAdvice" order="1"/>
    </aop:config>
</beans>
